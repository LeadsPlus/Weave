<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<admin:WizardViewStack
			xmlns:mx="http://www.adobe.com/2006/mxml"
			xmlns:ui="weave.ui.*"
			xmlns:admin="weave.ui.admin.*"
			xmlns="weave.ui.admin.wizards.*"
			label="Import SQL tables to Weave"
			finishEnabled="false"
			>
	<mx:VBox width="100%" height="100%">
		<!--<mx:Label fontWeight="bold" text="Add existing SQL data to a DataTable entry in SQLConfig.xml"/>-->
		<admin:SQLTableSelectorDialog id="tableSelector" showTableCombo="true" tableOverwriteCheckVisible="false"/>
		<mx:VBox visible="{Boolean(tableSelector.activeTable)}">
			<ui:Indent group="{tableSelector.indentGroup}" label="{Strings.table_display_name}">
				<mx:TextInput id="tableNameInput" text="{tableSelector.activeTable}" toolTip="{Strings.tip_table_display_name}"/>
				<mx:CheckBox label="Overwrite" id="tableNameOverwriteCheck" selected="false"/>
			</ui:Indent>
			<ui:Indent group="{tableSelector.indentGroup}" label="{Strings.key_column_name}">
				<ui:CustomComboBox id="keyColumnComboBox" prompt="Select a column..." dataProvider="{tableSelector.columns}" toolTip="{Strings.tip_key_column_dropdown}" change="handleKeyColumnChange()"/>
			</ui:Indent>
			<mx:VBox visible="{keyColumnComboBox.selectedItem}">
				<mx:Label text="What do these keys correspond to?"/>
				<admin:GeometryCollectionDialog paddingLeft="{paddingIndent}" id="geometrySelector" keyType="{tableSelector.activeTable}"/>
				
				<mx:CheckBox change="handleKeyColumnChange()" id="secondaryKeyColumnCheckBox" label="Format data for Dimension Slider" selected="false"/>
				<ui:Indent paddingLeft="{paddingIndent}"
						   grouped="false"
						   visible="{secondaryKeyColumnCheckBox.selected}"
						   includeInLayout="{secondaryKeyColumnCheckBox.selected}"
						   label="Secondary key column">
					<ui:CustomComboBox change="handleKeyColumnChange()" id="sqlSecondaryKeyColumnCombo" dataProvider="{tableSelector.columns}" toolTip="Select a secondary key column for use with the Dimension Slider"/>
				</ui:Indent>
				
				<mx:CheckBox id="generateFilterColumns" label="Generate filtered column queries" selected="false"/>					
				<ui:IndentTextInput visible="{generateFilterColumns.selected}"
							paddingLeft="{paddingIndent}"
							grouped="false"
							label="Columns to use as filters"
							id="filterColumnsInput"
							text="{WeaveAPI.CSVParser.createCSV([tableSelector.columns])}"/>
			</mx:VBox>
		</mx:VBox>
	</mx:VBox>
	<mx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			import mx.containers.ControlBar;
			import mx.controls.ComboBox;
			import mx.events.CollectionEvent;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import weave.Strings;
			import weave.api.WeaveAPI;
			import weave.data.CSVParser;
			import weave.services.AdminInterface;
			import weave.services.DelayedAsyncInvocation;
			
			private static const paddingIndent:int = 20;
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				tableSelector.schemaInput.addEventListener(Event.CHANGE,function():void{finishEnabled=false;});
				tableSelector._tableCombo.addEventListener(Event.CHANGE,function():void{finishEnabled=false;});
			}
			
			private function handleKeyColumnChange():void
			{
				keyColumnComboBox.errorString = '';
				sqlSecondaryKeyColumnCombo.errorString = '';
				
				finishEnabled = false;
				var query:DelayedAsyncInvocation = AdminInterface.instance.checkKeyColumnForSQLImport(
					tableSelector.activeSchema,
					tableSelector.activeTable,
					keyColumnComboBox.selectedLabel,
					secondaryKeyColumnCheckBox.selected? sqlSecondaryKeyColumnCombo.selectedLabel:null);
				
				query.addAsyncResponder(handleCheckResult,handleFaultCheck);
				
				function handleCheckResult(event:ResultEvent,token:Object=null):void
				{
					if(!event.result as Boolean)
					{
						keyColumnComboBox.errorString = "Key values are not unique";
						sqlSecondaryKeyColumnCombo.errorString = "Key values are not unique";
						
						finishEnabled = false;
					}else{
						keyColumnComboBox.errorString = '';
						sqlSecondaryKeyColumnCombo.errorString = '';
						
						finishEnabled = true;
					}
					
					keyColumnComboBox.invalidateDisplayList();
					sqlSecondaryKeyColumnCombo.invalidateDisplayList();
				}
				function handleFaultCheck(event:FaultEvent,token:Object=null):void
				{
					
				}
				
			}
			
			override public function finish():void
			{
				var filterColumns:Array = null;
				if (generateFilterColumns.selected && filterColumnsInput.text)
					filterColumns = WeaveAPI.CSVParser.parseCSV(filterColumnsInput.text)[0];
				var query:DelayedAsyncInvocation = AdminInterface.instance.addConfigDataTableFromDatabase(
						tableSelector.activeSchema,
						tableSelector.activeTable,
						keyColumnComboBox.selectedLabel,
						secondaryKeyColumnCheckBox.selected ? sqlSecondaryKeyColumnCombo.selectedLabel : null,
						tableNameInput.text,
						tableNameOverwriteCheck.selected,
						geometrySelector.selectedGeometryCollection,
						geometrySelector.selectedKeyType,
						filterColumns
					);
				
				controlBarEnabled = false;
				query.addAsyncResponder(handleResult, handleFault);
				function handleResult(event:ResultEvent, token:Object = null):void
				{
					controlBarEnabled = true;
				}
				function handleFault(event:FaultEvent, token:Object = null):void
				{
					controlBarEnabled = true;
				}
			}
		]]>
	</mx:Script>
</admin:WizardViewStack>
