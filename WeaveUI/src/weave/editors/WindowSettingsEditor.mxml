<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
		xmlns="weave.ui.editors.*"
		label="Window"
		enabled="{_panel != null}"
		creationPolicy="all" xmlns:ui="weave.ui.editors.*">
	<mx:HBox width="100%">
		<mx:Label text="Window title:"/>
		<mx:TextInput id="titleInput"
					  width="100%"
					  toolTip="Entering a title here will override the automatic title generated by the tool."
					  creationComplete="linkBindableProperty(_panel.panelTitle, event.target, 'text', 500);"/>
	</mx:HBox>
	<mx:HBox
			width="100%"
			borderStyle="solid"
			paddingLeft="5" paddingTop="5" paddingBottom="5" paddingRight="5" cornerRadius="5">
		<mx:VBox width="100%" height="100%">
			<mx:CheckBox label="Show borders" toolTip="Selecting this option will turn the borders of this tool on or off"
						 creationComplete="linkBindableProperty(_panel.enableBorders, event.target, 'selected');"/>
			<mx:CheckBox label="Allow move and resize" toolTip="Selecting this option will enable the user to move and resize the tool"
						 creationComplete="linkBindableProperty(_panel.enableMoveResize, event.target, 'selected')"/>
		</mx:VBox>
		<mx:VBox width="100%" height="100%">
			<mx:CheckBox label="Allow pin to back" toolTip="Selecting this option will enable the user to pin this tool to the back of the stage"
						 creationComplete="linkBindableProperty(_panel.pinnableToBack, event.target, 'selected')"/>
			<mx:CheckBox label="Allow pin to front" toolTip="Selecting this option will enable the user to pin this tool"
						 creationComplete="linkBindableProperty(_panel.pinnable, event.target, 'selected')"/>
			<mx:CheckBox label="Allow minimize" toolTip="Selecting this option will enable the user to minimize this tool"
						 creationComplete="linkBindableProperty(_panel.minimizable, event.target, 'selected')"/>
			<mx:CheckBox label="Allow maximize" toolTip="Selecting this option will enable the user to maximize this tool"
						 creationComplete="linkBindableProperty(_panel.maximizable, event.target,'selected');"/>
			<mx:CheckBox label="Allow close" toolTip="Selecting or deselecting this option will enable or disable the user to close this tool"
						 creationComplete="linkBindableProperty(_panel.closeable, event.target, 'selected')"/>
		</mx:VBox>
	</mx:HBox>

	<mx:HBox>
		<mx:Label text="Border color:"/>
		<mx:ColorPicker id="borderColorPicker"
						toolTip="Select a color for the border of this visualization - this will have no effect if the border is not enabled"
						change="borderColorPicked();"/>
		<mx:Button label="Reset" click="_panel.panelBorderColor.value = NaN;"/>
	</mx:HBox>

	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			import weave.api.linkBindableProperty;
			import weave.core.SessionManager;
			import weave.ui.DraggablePanel;
			import weave.utils.EventUtils;

			[Bindable]
			private var _panel:DraggablePanel = null;
			
			public function set target(panel:DraggablePanel):void
			{
				if (_panel)
					throw new Error("target should not be set more than once");
				
				_panel = panel;
			}
			override protected function childrenCreated():void
			{
				super.childrenCreated();

				_panel.panelBorderColor.addGroupedCallback(this, borderColorCallback, true);
				_panel.addEventListener(FlexEvent.UPDATE_COMPLETE, function(..._):void { borderColorCallback(); });
			}
			
			private function borderColorCallback():void
			{
				borderColorPicker.selectedColor = _panel.getStyle('borderColor');
			}
			private function borderColorPicked():void
			{
				_panel.panelBorderColor.value = borderColorPicker.selectedColor;
			}
		]]>
	</mx:Script>
</mx:VBox>
