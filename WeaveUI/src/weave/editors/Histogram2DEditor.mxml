<?xml version="1.0" encoding="utf-8"?>
<!--
/*
Weave (Web-based Analysis and Visualization Environment)
Copyright (C) 2008-2011 University of Massachusetts Lowell

This file is a part of Weave.

Weave is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License, Version 3,
as published by the Free Software Foundation.

Weave is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<mx:TabNavigator
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns="weave.editors.*"
	xmlns:ui="weave.ui.*" 
	verticalScrollPolicy="off"
	horizontalScrollPolicy="off"
	creationPolicy="all"
	implements="weave.api.ui.ILinkableObjectEditor"
	>
	<mx:Script>
		<![CDATA[
			import weave.Weave;
			import weave.api.core.ILinkableObject;
			import weave.api.linkBindableProperty;
			import weave.api.linkSessionState;
			import weave.api.unlinkSessionState;
			import weave.data.AttributeColumns.BinnedColumn;
			import weave.ui.ColorController;
			import weave.ui.DraggablePanel;
			import weave.visualization.tools.Histogram2DTool;
			import weave.visualization.tools.HistogramTool;
			
			[Bindable]
			private var _target:Histogram2DTool = null;
			public function setTarget(object:ILinkableObject):void
			{
				if(!(object is Histogram2DTool))
					return;
				
				_target = object as Histogram2DTool;	
				
			}
			
			public function applyChanges():void
			{
				
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				if(_target == null)
					return;
				
				xColumnComponent.dynamicObject = _target.plotter.xColumn;
				yColumnComponent.dynamicObject = _target.plotter.yColumn;
				
				colorColumnComponent.dynamicObject = Weave.defaultColorDataColumn.internalDynamicColumn;
				
				cRampEditor.colorRamp = _target.plotter.binColors;
				
				linkBindableProperty(_target.includeToolAttributesInProbe,probeColumnsCheckBox,'selected');
				linkBindableProperty(_target.plotter.showAverageColorData, showAverageColorData, 'selected');
				
				handleBinColRadioButtonChange();
			}
			
			private var _prevBinnedColumn:BinnedColumn = null;
			private function handleBinColRadioButtonChange():void
			{
				var selectedCol:String = binColGroup.selectedValue as String;
				
				//it is null when the tool loads for the first time and so it defaults to the x column
				if (selectedCol == "xBinCol" || selectedCol == null)
				{
					xBinColRadioButton.setStyle('fontWeight','bold');
					yBinColRadioButton.setStyle('fontWeight','normal');
					
					if (_prevBinnedColumn)
						unlinkSessionState(_prevBinnedColumn, binEditor.binnedColumn);
					
					if (_target.plotter.xBinnedColumn)
						linkSessionState(_target.plotter.xBinnedColumn, binEditor.binnedColumn);
					
					_prevBinnedColumn = _target.plotter.xBinnedColumn;
				}
				else if (selectedCol == "yBinCol")
				{
					yBinColRadioButton.setStyle('fontWeight','bold');
					xBinColRadioButton.setStyle('fontWeight','normal');
					
					if (_prevBinnedColumn)
						unlinkSessionState(_prevBinnedColumn, binEditor.binnedColumn);
					
					if (_target.plotter.yBinnedColumn)
						linkSessionState(_target.plotter.yBinnedColumn, binEditor.binnedColumn);
					
					_prevBinnedColumn = _target.plotter.yBinnedColumn;
				}
			}
		]]>
	</mx:Script>
	<mx:VBox label="Visualization Controls">
		<mx:CheckBox id="probeColumnsCheckBox" label="Include tool attributes in probe tooltip"
					 toolTip="Checking this box makes the tool's binned attribute visible in this tool's probe tooltip"
					 />
		<ui:DynamicColumnComponent visTool="{_target}" id="xColumnComponent" label="X Column"/>
		<ui:DynamicColumnComponent visTool="{_target}" id="yColumnComponent" label="Y Column"/>
	</mx:VBox>
	<mx:VBox label="Binning Controls">
		<mx:HBox>
			<mx:Label text="Select Column:"/>
			<mx:RadioButtonGroup id="binColGroup" change="handleBinColRadioButtonChange()"/>
			<mx:RadioButton groupName="binColGroup" label="X Column" value="xBinCol" id="xBinColRadioButton" selected="true"/>
			<mx:RadioButton groupName="binColGroup" label="Y Column" value="yBinCol" id="yBinColRadioButton"/>
		</mx:HBox>
		<ui:BinningDefinitionEditor id="binEditor"/>
	</mx:VBox>
	<mx:VBox label="Advanced">
		<mx:CheckBox id="showAverageColorData" label="Color by average data value instead of record count"
					 />
		<mx:HBox width="100%" verticalAlign="middle" enabled="{showAverageColorData.selected}">
			<ui:DynamicColumnComponent id="colorColumnComponent" visTool="{_target}" label="Color data"/>
			<mx:Button label="Edit colors..." click="DraggablePanel.openStaticInstance(ColorController);"/>
		</mx:HBox>
		<ui:ColorRampEditor id="cRampEditor" enabled="{!showAverageColorData.selected}"/>
	</mx:VBox>
</mx:TabNavigator>