<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/

-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
			   xmlns:mx="http://www.adobe.com/2006/mxml"
			   xmlns:ui="weave.ui.*" 
			   xmlns:settings="weave.ui.settings.*" xmlns:LinkableObjectList="weave.ui.LinkableObjectList.*"
			   xmlns:userControls="weave.ui.userControls.*"
			   layout="absolute">
	<mx:Script>
		<![CDATA[
			import mx.controls.TextArea;
			import mx.core.IToolTip;
			import mx.events.SliderEvent;
			import mx.managers.ToolTipManager;
			
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IKeySet;
			import weave.api.data.IQualifiedKey;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.linkSessionState;
			import weave.api.primitives.IBounds2D;
			import weave.api.registerLinkableChild;
			import weave.api.ui.IVisTool;
			import weave.compiler.StandardLib;
			import weave.core.LinkableBoolean;
			import weave.core.LinkableNumber;
			import weave.data.AttributeColumns.ColorColumn;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.AttributeColumns.FilteredColumn;
			import weave.primitives.Bounds2D;
			import weave.ui.AttributeSelectorPanel;
			import weave.utils.BitmapText;
			import weave.utils.ColumnUtils;
			import weave.utils.LinkableTextFormat;
			import weave.visualization.layers.PlotLayer;
			import weave.visualization.layers.SelectablePlotLayer;
			import weave.visualization.plotters.RegressionLinePlotter;
			import weave.visualization.plotters.ScatterPlotPlotter;
			import weave.visualization.plotters.styles.SolidFillStyle;

			WeaveAPI.registerImplementation(IVisTool, ScatterPlotTool, "Scatterplot");

			public var plotter:ScatterPlotPlotter = null;
			
			override protected function constructor():void
			{
				super.constructor();
				
				// lock dynamic objects into place
				plotter = initializePlotters(ScatterPlotPlotter, true);
				visualization.enableProbeLine(true, true);
				
				//BEGIN TEMPORARY SOLUTION
				visualization.marginLeftNumber.addGroupedCallback(this, updateAxisLabels);
				visualization.marginBottomNumber.addGroupedCallback(this, updateAxisLabels);
				getCallbackCollection(plotter).addGroupedCallback(this, updateAxisLabels, true);
				// END TEMPORARY SOLUTION
				
				visualization.enableZoomAndPan.value = false;
				
				xAxisLayer.axisPlotter.setLabelFunction(labelFunctionX);
				yAxisLayer.axisPlotter.setLabelFunction(labelFunctionY);
				
				var self:* = this;
				visualization.bottomMarginClickCallbacks.addImmediateCallback(this, function():void { AttributeSelectorPanel.openToolSelector(self, plotter.xColumn); })
				visualization.leftMarginClickCallbacks.addImmediateCallback(this, function():void { AttributeSelectorPanel.openToolSelector(self, plotter.yColumn); })
				
				visualization.enableAutoZoomXToNiceNumbers.value = true;
				visualization.enableAutoZoomYToNiceNumbers.value = true;
				
				getCallbackCollection(plotter).addGroupedCallback(this, handlePanelTitleChange, true);
				
				initColumnDefaults(plotter.xColumn, plotter.yColumn, colorColumn);
				
				plotter.xColumn.addGroupedCallback(this, updateProbeColumns);
				plotter.yColumn.addGroupedCallback(this, updateProbeColumns);
				colorColumn.addGroupedCallback(this, updateProbeColumns);
				
				plotter.enabledSizeBy.value = true;
				visualization.marginBottom.value = "80";
				visualization.marginTop.value    = "30";
				visualization.marginLeft.value   = "80";
				visualization.marginRight.value  = "30";
				
				initializeUndefinedLayers();				
				initRegressionLayer();
			}
			
			override public function getSelectableAttributeNames():Array
			{
				return ["X", "Y", "Color", "Size"];
			}
			override public function getSelectableAttributes():Array
			{
				return [plotter.xColumn, plotter.yColumn, colorColumn, plotter.radiusColumn];
			}
			
			private var _regressionLineLayer:PlotLayer ;
			private const REGRESSION_LAYER_NAME:String = "regressionLine";
			private var _regressionPlotter:RegressionLinePlotter = null;
			
			private function initRegressionLayer():void
			{
				_regressionLineLayer = visualization.layers.requestObject(REGRESSION_LAYER_NAME, PlotLayer, true);
				_regressionPlotter = _regressionLineLayer.getDynamicPlotter().requestLocalObject(RegressionLinePlotter,true);
				linkSessionState(plotter.xColumn, _regressionPlotter.xColumn);
				linkSessionState(plotter.yColumn, _regressionPlotter.yColumn);
				_regressionPlotter.drawLine.value = false;				
			}
			
			
			/*BEGIN UNDEFINED LAYER CODE*/
					
			private var _undefinedXLayer:SelectablePlotLayer;
			private var _undefinedYLayer:SelectablePlotLayer;
			private var _undefinedXYLayer:SelectablePlotLayer;
			
			private var _undefinedXPlotter:ScatterPlotPlotter;
			private var _undefinedYPlotter:ScatterPlotPlotter;
			private var _undefinedXYPlotter:ScatterPlotPlotter;
									
			private const UNDEFINED_X_NAME:String = "undefinedX";
			private const UNDEFINED_Y_NAME:String = "undefinedY";
			private const UNDEFINED_XY_NAME:String = "undefinedXY";
			
			private var _tempPoint:Point = new Point();
			private const _tempBounds:Bounds2D = new Bounds2D();
			private const dataBounds:Bounds2D = new Bounds2D();
			private const _screenBounds:Bounds2D = new Bounds2D();						
			
			private function initializeUndefinedLayers():void
			{
				_undefinedXLayer = visualization.layers.requestObject(UNDEFINED_X_NAME,SelectablePlotLayer, true);
				_undefinedYLayer = visualization.layers.requestObject(UNDEFINED_Y_NAME, SelectablePlotLayer, true);
				_undefinedXYLayer = visualization.layers.requestObject(UNDEFINED_XY_NAME,SelectablePlotLayer, true);
				
				_undefinedXPlotter = _undefinedXLayer.getDynamicPlotter().requestLocalObject(ScatterPlotPlotter, true);
				_undefinedYPlotter = _undefinedYLayer.getDynamicPlotter().requestLocalObject(ScatterPlotPlotter, true);
				_undefinedXYPlotter = _undefinedXYLayer.getDynamicPlotter().requestLocalObject(ScatterPlotPlotter, true);
				
				for each(var _plotter:ScatterPlotPlotter in [_undefinedXPlotter, _undefinedYPlotter, _undefinedXYPlotter])
				{
					linkSessionState(plotter.colorColumn, _plotter.colorColumn);
					linkSessionState(plotter.alphaColumn, _plotter.alphaColumn);
					linkSessionState(plotter.radiusColumn, _plotter.radiusColumn);					
					linkSessionState(plotter.defaultScreenRadius, _plotter.defaultScreenRadius);
					linkSessionState(plotter.enabledSizeBy, _plotter.enabledSizeBy);
					linkSessionState(plotter.maxScreenRadius, _plotter.maxScreenRadius);
					linkSessionState(plotter.minScreenRadius, _plotter.minScreenRadius);
				} 	
				
				linkSessionState(plotter.xColumn, _undefinedYPlotter.xColumn);
				linkSessionState(plotter.yColumn, _undefinedXPlotter.yColumn);
				
				for each(var column:IAttributeColumn in getSelectableAttributes())
				{
					column.addGroupedCallback(this, setUndefinedPlotterKeySource, true);
				}
				
				getCallbackCollection(visualization.zoomBounds).addImmediateCallback(this, invalidateDisplayList);
				
				visualization.marginTopNumber.addImmediateCallback(this, invalidateDisplayList);
				visualization.marginBottomNumber.addImmediateCallback(this, invalidateDisplayList);
				visualization.marginRightNumber.addImmediateCallback(this, invalidateDisplayList);
				visualization.marginLeftNumber.addImmediateCallback(this, invalidateDisplayList);
				
				visualization.gridLineAlpha.addImmediateCallback(this, invalidateDisplayList);
				visualization.gridLineColor.addImmediateCallback(this, invalidateDisplayList);
				visualization.gridLineThickness.addImmediateCallback(this, invalidateDisplayList);
				
				for each (var layer:SelectablePlotLayer in [_undefinedXLayer, _undefinedYLayer, _undefinedXYLayer])
				{					
					layer.showMissingRecords(true);
					
					linkSessionState(plotLayer.backgroundIsVisible, layer.backgroundIsVisible);
					linkSessionState(plotLayer.layerIsVisible, layer.layerIsVisible);
					linkSessionState(plotLayer.layerIsSelectable, layer.layerIsSelectable);					
				} 																		
				
				addEventListener(MouseEvent.MOUSE_MOVE, displayToolTip);
				addEventListener(MouseEvent.MOUSE_OUT, destroyToolTip);
			}						
			
			private function setUndefinedPlotterKeySource():void
			{
				var recordKeys:Array = plotter.keySet.keys;
				var missingXkeys:Array = [];
				var missingYkeys:Array = [];
				var missingXYkeys:Array = [];
				var missingX:Boolean;
				var missingY:Boolean;
				
				for each(var key:IQualifiedKey in recordKeys)	
				{
					missingX = !plotter.xColumn.containsKey(key);
					missingY = !plotter.yColumn.containsKey(key);
					
					if(missingX)
					{
						if(missingY)
							missingXYkeys.push(key);
						else 
							missingXkeys.push(key);
					}
					else if(missingY)
					{
						missingYkeys.push(key);
					}
				}
				_undefinedXPlotter.setCustomKeySource(missingXkeys);
				_undefinedYPlotter.setCustomKeySource(missingYkeys);
				_undefinedXYPlotter.setCustomKeySource(missingXYkeys);
			}
			
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				updateUndefinedPlotterBounds();
			}
			
			
			private function updateUndefinedPlotterBounds():void
			{
				var b:IBounds2D = _tempBounds;
				plotLayer.getScreenBounds(b);
				if (b.isEmpty())
				{
					callLater(updateUndefinedPlotterBounds);
					return;
				}
				
				var graphics:Graphics = visualization.graphics;
				graphics.clear();
				graphics.lineStyle(visualization.gridLineThickness.value, visualization.gridLineColor.value, visualization.gridLineAlpha.value);
				
				var marginRight:Number = visualization.marginRightNumber.value;
				
				// right margin; undefined x
				plotLayer.getScreenBounds(b);
				graphics.moveTo(b.getXMax() + marginRight / 2, b.getYMin());
				graphics.lineTo(b.getXMax() + marginRight / 2, b.getYMax());
				b.setXMin(b.getXMax() + marginRight);
				_undefinedXLayer.hack_lockScreenBounds(b);
				
				// top margin; undefined y
				plotLayer.getScreenBounds(b);
				graphics.moveTo(b.getXMin(), b.getYMax() / 2);
				graphics.lineTo(b.getXMax(), b.getYMax() / 2);
				b.setYMin(0);
				_undefinedYLayer.hack_lockScreenBounds(b);
				
				// top-right corner; undefined x and y
				plotLayer.getScreenBounds(b);
				b.setMinCoords(b.getXMax() + marginRight, 0);
				_undefinedXYLayer.hack_lockScreenBounds(b);
			}
			
			
			private var _toolTip:IToolTip = null;
			private function displayToolTip(event:MouseEvent):void
			{
				destroyToolTip(event);
				_tempPoint = this.globalToContent(new Point(event.stageX, event.stageY));
								
				var probeExists:Boolean = plotLayer.probeFilter.internalObject is IKeySet &&
					(plotLayer.probeFilter.internalObject as IKeySet).keys.length > 0;

				var selectionExists:Boolean = plotLayer.selectionFilter.internalObject is IKeySet &&
					(plotLayer.selectionFilter.internalObject as IKeySet).keys.length > 0;
				
				if(probeExists || selectionExists) return;
				
				_undefinedXLayer.getScreenBounds(_tempBounds);				
				if(_tempBounds.containsPoint(_tempPoint))
				{
					_tempPoint = this.contentToGlobal(_tempPoint);
					_toolTip = ToolTipManager.createToolTip("undefined x",_tempPoint.x, _tempPoint.y);	
					visualization.constrainToolTipsToStage(_toolTip);
					return;
				}
				_undefinedYLayer.getScreenBounds(_tempBounds);
				if(_tempBounds.containsPoint(_tempPoint))
				{
					_tempPoint = this.contentToGlobal(_tempPoint);
					_toolTip = ToolTipManager.createToolTip("undefined y",_tempPoint.x, _tempPoint.y);
					visualization.constrainToolTipsToStage(_toolTip);
					return;
				}
				_undefinedXYLayer.getScreenBounds(_tempBounds);
				if(_tempBounds.containsPoint(_tempPoint))
				{
					_tempPoint = this.contentToGlobal(_tempPoint);
					_toolTip = ToolTipManager.createToolTip("undefined x,y",_tempPoint.x, _tempPoint.y);
					visualization.constrainToolTipsToStage(_toolTip);
					return;
				}   
			}
			
			private function destroyToolTip(event:MouseEvent):void
			{
				if(_toolTip != null) 
				{
					ToolTipManager.destroyToolTip(_toolTip);
					_toolTip = null;
				}
			}
			/*END UNDEFINED LAYER CODE*/
			
			public const includeToolAttributesInProbe:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true), updateProbeColumns);
			
			private function updateProbeColumns():void
			{
				if(includeToolAttributesInProbe.value)
				{
					visualization.additionalProbeColumns = [];
					if (plotter.xColumn.internalColumn)
						visualization.additionalProbeColumns.push(plotter.xColumn.internalColumn);
					if (plotter.yColumn.internalColumn)
						visualization.additionalProbeColumns.push(plotter.yColumn.internalColumn);
					if (colorColumn.internalColumn)
						visualization.additionalProbeColumns.push(colorColumn.internalColumn);
					if (visualization.additionalProbeColumns.length == 0)
						visualization.additionalProbeColumns = null ;
				}
				else visualization.additionalProbeColumns = null;
			}
			
			override protected function get defaultPanelTitle():String
			{
				return "Scatter Plot of " + ColumnUtils.getTitle(plotter.xColumn) + " -vs- " + ColumnUtils.getTitle(plotter.yColumn);
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();

				plotter.colorColumn.addImmediateCallback(this, handleColorColumnChange, true);
				linkBindableProperty(plotter.alphaColumn.defaultValue, alphaSlider, "value");
				linkBindableProperty(plotter.enabledSizeBy, sizeByCheck, "selected");
				plotter.minScreenRadius.addGroupedCallback(this, updateSizeSlider);
				plotter.maxScreenRadius.addGroupedCallback(this, updateSizeSlider, true);
				visualization.marginLeftNumber.addGroupedCallback(this, updateEquation);
				visualization.marginBottomNumber.addGroupedCallback(this, updateEquation);
				getCallbackCollection(_regressionPlotter).addGroupedCallback(this, updateEquation, true);
				showColorPicker.addGroupedCallback(this, updateColorPicker);
				overrideColor.addGroupedCallback(this, updateColorPicker);
				
				getCallbackCollection(LinkableTextFormat.defaultTextFormat).addGroupedCallback(this, updateEquationStyle, true);
			}
			
			private function updateEquationStyle():void
			{
				LinkableTextFormat.defaultTextFormat.copyToStyle(equationText);
			}
			
			private function updateEquation():void
			{
				if ( _regressionPlotter.drawLine.value )
				{
					if (equationText.parent != visCanvas)
						visCanvas.addChild(equationText);
					var slope:Number = StandardLib.roundSignificant(_regressionPlotter.getSlope(), 4);
					var intercept:Number = StandardLib.roundSignificant(_regressionPlotter.getIntercept(), 4);
					lineEquation.text = "Equation: y = " + slope + "x"+ " + " + intercept;
					equationText.text = "slope = " + slope + "\nintercept = " + intercept;
					equationText.validateNow();
					// severely hacked
					equationText.width = visualization.marginLeftNumber.value * 2;
					equationText.height = Math.min(equationText.textHeight + 10, visualization.marginBottomNumber.value);
				}
				else
				{ 
					if (equationText.parent)
						equationText.parent.removeChild(equationText);
					lineEquation.text = "Equation: y = mx + b";
				}
			}
			private function updateAxisLabels():void
			{
				visualization.bottomMarginColumn = plotter.xColumn;
				visualization.leftMarginColumn = plotter.yColumn;
				
				xAxisLayer.axisPlotter.setSideAxisName(
					ColumnUtils.getTitle(plotter.xColumn), 
					0,   
					0, visualization.marginBottomNumber.value - 3, 
					BitmapText.VERTICAL_ALIGN_BOTTOM
				);
				
				yAxisLayer.axisPlotter.setSideAxisName(
					ColumnUtils.getTitle(plotter.yColumn), 
					-90, 
					-visualization.marginLeftNumber.value, 0, 
					BitmapText.VERTICAL_ALIGN_TOP
				);
			}
			
			public function labelFunctionX(value:Number):String
			{
				return ColumnUtils.deriveStringFromNumber(plotter.xColumn, value);
			}
			public function labelFunctionY(value:Number):String
			{
				return ColumnUtils.deriveStringFromNumber(plotter.yColumn, value);
			}
			
			public function get colorColumn():DynamicColumn
			{
				return Weave.defaultColorDataColumn.internalDynamicColumn;
			}
			
			private function updateSizeSlider():void
			{
				sizeBySlider.values = [plotter.minScreenRadius.value, plotter.maxScreenRadius.value];
			}
			
			private function alphaSliderFormatFunction(item:Number):String {
				//return int(100 - (item * 100)) + "% Transparent";
				return int((item * 100)) + "% Opaque" + "\n" + int(100 - (item * 100)) + "% Transparent";
			}
			
			
			private function handleSizeSliderChange(event:SliderEvent):void
			{
				if(event.thumbIndex == 0)
				{
					plotter.minScreenRadius.value = event.value;
				}
				else
				{
					plotter.maxScreenRadius.value = event.value;
				}
			}
			
			protected function createLegend():void
			{
				var sizeBinLegendTool:SizeBinLegendTool = Weave.root.requestObject(null, SizeBinLegendTool, false);
				sizeBinLegendTool.dynamicScatterPlotTool.globalName = Weave.root.getName(this);
			}
			
			private function updateColorPicker():void
			{
				if (!parent)
				{
					callLater(updateColorPicker);
					return;
				}
				
				if ( showColorPicker.value )
				{
					plotter.colorColumn.defaultValue.value = overrideColor.value;
					plotter.colorColumn.internalDynamicColumn.removeObject();
				}
				else
				{
					plotter.colorColumn.defaultValue.value = NaN;
					plotter.colorColumn.internalDynamicColumn.requestGlobalObject(_prevGlobalColorColumnName, ColorColumn, false);
				}
				scatterplotColorOverride.enabled = showColorPicker.value;
			}
			
			private var _prevGlobalColorColumnName:String = null;
			private function handleColorColumnChange():void
			{
				var newName:String = plotter.colorColumn.internalDynamicColumn.globalName;
				if (newName)
					_prevGlobalColorColumnName = newName;
			}
			
			public const showColorPicker:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false));
			public const overrideColor:LinkableNumber = registerLinkableChild(this, new LinkableNumber());
				
		]]>
	</mx:Script>
	<mx:TextArea id="equationText"
		editable="false"
		verticalScrollPolicy="off"
		horizontalScrollPolicy="off"
		wordWrap="false"
		backgroundAlpha="0"
		borderThickness="0"
		bottom="0"
		left="0"/>
	<ui:ControlPanel>
		<mx:VBox id="VizControlsPanel" label="Visualization Controls">
			<ui:DynamicColumnComponent visTool="{this}" label="x column" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = plotter.xColumn"/>
			<ui:DynamicColumnComponent visTool="{this}" label="y column" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = plotter.yColumn"/>
			<ui:DynamicColumnComponent visTool="{this}" label="color" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = colorColumn" showLinkControl="false"/>
			<ui:DynamicColumnComponent visTool="{this}" label="size" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = plotter.radiusColumn"/>
			<mx:HBox width="100%" verticalAlign="middle">
				<mx:CheckBox id="sizeByCheck" label="Size by: {sizeByCheck.selected ? 'ENABLED' : 'DISABLED'}"/>
				
				<mx:Label text="Point Size:"/>
				<mx:HSlider id="sizeBySlider"
							enabled="{sizeByCheck.selected}"
							liveDragging="true"
							width="100%"
							thumbCount="2" 
							snapInterval="1"
							minimum="1" 
							maximum="60"
							tickInterval="5"
							change="handleSizeSliderChange(event)"
							mouseDown="event.stopImmediatePropagation();"/>
			</mx:HBox>
			<mx:HBox width="100%" verticalAlign="middle">
				<mx:Label text="Point Opacity:" 
						  toolTip="Use this control to see how transparent points are.  Moving left increases transparency (decreased opacity), moving to the right decreases transparency (increased opacity) up to fully opaque (no transparency)."/>
				
				<mx:HSlider id="alphaSlider" 
							width="100%" 
							alpha="1.0"
							dataTipFormatFunction="alphaSliderFormatFunction"
							minimum="0.1" maximum="1.0" value="1.0"
							liveDragging="true"/>
			</mx:HBox>
			<mx:CheckBox id="probeColumnsCheckBox" label="Include tool attributes in probe tooltip"
						 toolTip="Checking this box makes the x, y, color and size attributes visible in this tool's probe tooltip"
						 creationComplete="linkBindableProperty(includeToolAttributesInProbe,event.target,'selected')"/>
			<mx:Button label="Show legend" click="createLegend()"/>
		</mx:VBox>
		<mx:VBox id="AdvancedPanel" label="Advanced">
			<mx:VBox>
				<mx:CheckBox id="regressionLineCheckBox" label="Enable regression line"
							 toolTip="Check this box to draw a regression line on the scatterplot"
							 creationComplete="linkBindableProperty(_regressionPlotter.drawLine,event.target,'selected')"/>
				<ui:Indent>
					<mx:VBox>
						<mx:Label id="lineEquation" text="Equation: y = mx + b"/>
						<mx:HBox>
							<mx:Label text="Line Color" />
							<mx:ColorPicker id="regressionColorPicker" 
											creationComplete="linkBindableProperty(_regressionPlotter.lineStyle.color.defaultValue, event.target, 'selectedColor')"
											enabled="{regressionLineCheckBox.selected}"/>
						</mx:HBox>
						<mx:HBox>
							<mx:Label text="Line Thickness" />
							<mx:HSlider id="regressionThicknessSlider"
										creationComplete="linkBindableProperty(_regressionPlotter.lineStyle.weight.defaultValue, event.target, 'value')"
										enabled="{regressionLineCheckBox.selected}"
										minimum="1" maximum="10" snapInterval="1" liveDragging="true"
										tickInterval="1"/>
						</mx:HBox>
						<mx:HBox>
							<mx:Label text="Line Opacity" />
							<mx:HSlider id="regressionAlphaSlider"
										enabled="{regressionLineCheckBox.selected}"
										minimum="0.1" maximum="1" snapInterval=".1" liveDragging="true"
										tickInterval="0.1"
										creationComplete="linkBindableProperty(_regressionPlotter.lineStyle.alpha.defaultValue, event.target, 'value')"/>
						</mx:HBox>
					</mx:VBox>
				</ui:Indent>
			</mx:VBox>
			<mx:HBox>
				<mx:CheckBox id="colorOverrideCheckbox" label="Override Global Color" creationComplete="linkBindableProperty(showColorPicker,event.target,'selected')"/>
				<mx:ColorPicker id="scatterplotColorOverride" creationComplete="linkBindableProperty(overrideColor,event.target,'selectedColor')"/>
			</mx:HBox>
		</mx:VBox>
	</ui:ControlPanel>
</SimpleVisTool>
