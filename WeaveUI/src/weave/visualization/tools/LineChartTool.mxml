<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
	     xmlns:mx="http://www.adobe.com/2006/mxml"
	     xmlns:ui="weave.ui.*"
		 xmlns:userControls="weave.ui.userControls.*"
		 xmlns:settings="weave.ui.settings.*" layout="absolute">
	<mx:Script>
		<![CDATA[
			import mx.utils.StringUtil;
			
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.core.ILinkableObject;
			import weave.api.data.AttributeColumnMetadata;
			import weave.api.data.IAttributeColumn;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.linkSessionState;
			import weave.api.registerLinkableChild;
			import weave.api.ui.IVisTool;
			import weave.core.LinkableBoolean;
			import weave.data.AttributeColumns.AlwaysDefinedColumn;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.AttributeColumns.EquationColumn;
			import weave.data.AttributeColumns.FilteredColumn;
			import weave.primitives.Bounds2D;
			import weave.ui.AttributeSelectorPanel;
			import weave.ui.ColumnListComponent;
			import weave.utils.BitmapText;
			import weave.utils.ColumnUtils;
			import weave.utils.LinkableTextFormat;
			import weave.utils.ProbeTextUtils;
			import weave.visualization.layers.AxisLayer;
			import weave.visualization.layers.SelectablePlotLayer;
			import weave.visualization.plotters.ParallelCoordinatesPlotter;
			import weave.visualization.plotters.TextGlyphPlotter;
			
			WeaveAPI.registerImplementation(IVisTool, LineChartTool, "Line Chart");
			
			[Bindable]
			public var _plotter:ParallelCoordinatesPlotter = null;
			override protected function constructor():void
			{
				super.constructor();
				
				visualization.marginBottom.value = "80";
				visualization.marginTop.value    = "10";
				visualization.marginLeft.value   = "80";
				visualization.marginRight.value  = "80";
				
				// lock dynamic objects into place
				_plotter = initializePlotters(ParallelCoordinatesPlotter, true);
				
				// default axis values
				yAxisLayer.axisPlotter.tickCountRequested.value = 5;
				xAxisLayer.axisPlotter.forceTickCount.value = true;

				// add this callback first because it needs to be called for each column that is removed
				_plotter.columns.childListCallbacks.addImmediateCallback(this, handleColumnAddRemoveReorder);
				
				visualization.includeNonSelectableLayersInAutoZoom.lock();
				visualization.enableZoomAndPan.value = false;

				//This variable represents whether or not the tool is a 
				//lineChart(false) or parallelCoords(true)
				_plotter.normalize.value = false;
				_plotter.normalize.lock();
				
				addLabelLayer();
				
				linkSessionState(labelPlotter.zoomToSubset, _plotter.zoomToSubset);

				getCallbackCollection(visualization.zoomBounds).addGroupedCallback(this, updateAxes);
			
				// BEGIN TEMPORARY SOLUTION
				visualization.marginLeftNumber.addGroupedCallback(this, updateAxes);
				visualization.marginBottomNumber.addGroupedCallback(this, updateAxes);
				visualization.marginTopNumber.addGroupedCallback(this, updateAxes);
				visualization.marginRightNumber.addGroupedCallback(this, updateAxes);

				getCallbackCollection(_plotter).addGroupedCallback(this, updateAxes, true);
				// END TEMPORARY SOLUTION
				var self:* = this;
				visualization.bottomMarginClickCallbacks.addImmediateCallback(this, function():void { AttributeSelectorPanel.openToolSelector(self, _plotter.columns); });
				
				var count:int = getDefaultColumnsOfMostCommonKeyType().length;
				var columnsToInit:Array = [];
				for (var i:int = 0; i < count; i++)
					columnsToInit.push(_plotter.columns.requestObject(null, DynamicColumn, false));
				if (columnsToInit.length > 0)
					initColumnDefaults.apply(null, columnsToInit);
				
				_plotter.columns.addGroupedCallback(this, updateProbeColumns, true);

				
				linkSessionState(visualization.marginRightNumber, labelPlotter.maxWidth);
			}

			public const includeToolAttributesInProbe:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true), updateProbeColumns);
			
			private function updateProbeColumns():void
			{
				if (includeToolAttributesInProbe.value)
				{
					visualization.additionalProbeColumns = _plotter.columns.getObjects(IAttributeColumn);
					visualization.additionalProbeColumns.unshift(labelPlotter.text, colorColumn);
				}
				else
					visualization.additionalProbeColumns = null;
			}
			
			
			
/* 			private function updateFilterText():void
			{
				xValuesInput.text = WeaveAPI.CSVParser.createCSV([_plotter.getXValues()]);
			} */
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				// fix session state from old versions
				for each (var name:String in visualization.layers.getNames(AxisLayer))
					visualization.layers.removeObject(name);
				
				xAxisLayer.axisPlotter.setLabelFunction(getColumnTitle);
				xAxisLayer.axisPlotter.axisLabelRelativeAngle.value = -45;
				xAxisLayer.axisPlotter.labelHorizontalAlign.value = BitmapText.HORIZONTAL_ALIGN_RIGHT;
				xAxisLayer.axisPlotter.labelVerticalAlign.value = BitmapText.VERTICAL_ALIGN_TOP;
				xAxisLayer.axisPlotter.labelDistanceIsVertical.value = false;
				
				yAxisLayer.axisPlotter.setLabelFunction(yAxisLabelFunction);
				
				visualization.includeNonSelectableLayersInAutoZoom.value = false;
				
				

				
				//visualization.getPlotLayer().backgroundIsVisible.addImmediateCallback(this, updateSelectionAndProbeOnlyCheckBox, true);
			}
			
			override public function getSelectableAttributeNames():Array
			{
				return ["Color","Label","Columns"];
			}
			override public function getSelectableAttributes():Array
			{
				return [colorColumn,labelPlotter.text,_plotter.columns];
			}
			
			public function get colorColumn():DynamicColumn
			{
				return Weave.defaultColorDataColumn.internalDynamicColumn;
			}
			
			private function getColumnTitle( index:Number ):String
			{
				try {
					var columns:Array = _plotter.columns.getObjects();
					return ColumnUtils.getTitle(columns[index]);
				} catch(e:Error) {}
				return "";
			}
			
			private var axisPrefix:String =  "Axis for: ";
			private function handleColumnAddRemoveReorder():void
			{
				var removedName:String = _plotter.columns.childListCallbacks.lastNameRemoved;
				if (removedName != null)
				{
					//trace("removed:",removedName)
					visualization.layers.removeObject(axisPrefix + removedName);
				}
			}
			
			private static const tempBounds:Bounds2D = new Bounds2D(); // reusable temporary object
			
			private function yAxisLabelFunction(value:Number):String
			{
				var _columns:Array = _plotter.columns.getObjects();
				if (_columns.length > 0)
					return ColumnUtils.deriveStringFromNumber(_columns[0], value); // always use the first column to format the axis labels
				return null;
			}
			
			private function updateAxes():void
			{
				handlePanelTitleChange();
				
				var columns:Array = _plotter.columns.getObjects();
				
				xAxisLayer.axisPlotter.tickCountRequested.value = Math.max(2, columns.length);
				
				// get bounds for y axis
				visualization.zoomBounds.getDataBounds(tempBounds);
				tempBounds.xMax = tempBounds.xMin;
				
				yAxisLayer.axisPlotter.axisLineMinValue.value = tempBounds.yMin;
				yAxisLayer.axisPlotter.axisLineMaxValue.value = tempBounds.yMax;
			
				yAxisLayer.axisPlotter.axisLineDataBounds.copyFrom(tempBounds);
				
				var xAxisName:String = '';
				var yAxisName:String = '';
				if (_plotter.enableGroupBy.value)
				{
					xAxisName = ColumnUtils.getTitle(_plotter.xData);
					yAxisName = ColumnUtils.getTitle(_plotter.yData);
				}
				xAxisLayer.axisPlotter.setSideAxisName(
					xAxisName,
					0,
					0, visualization.marginBottomNumber.value - 3,
					BitmapText.VERTICAL_ALIGN_BOTTOM
				);
				yAxisLayer.axisPlotter.setSideAxisName(
					yAxisName,
					-90,
					-visualization.marginLeftNumber.value, 0,
					BitmapText.VERTICAL_ALIGN_TOP
				);

				xAxisLayer.axisPlotter.updateLabels();
				yAxisLayer.axisPlotter.updateLabels();			
			}
			
			override protected function get defaultPanelTitle():String
			{
				var columns:Array = _plotter.columns.getObjects();
				if (columns.length == 0)
					return 'Line Chart';
				
				if (_plotter.enableGroupBy.value)
					return StringUtil.substitute(
						"Line Chart of {0} by {1}",
						ColumnUtils.getTitle(_plotter.yData),
						ColumnUtils.getTitle(_plotter.xData)
					);
				
				var newTitle:String = "Line Chart of ";
				for (var i:int = 0; i < columns.length; i++)
				{
					if (i > 0)
						newTitle += ', ';
					newTitle += ColumnUtils.getTitle(columns[i]);
				}
				return newTitle;
			}
			

			

			

			
			public var labelPlotter:TextGlyphPlotter = null ;
			private function addLabelLayer():void
			{
				var layer:SelectablePlotLayer = visualization.layers.requestObject("label", SelectablePlotLayer, true);
				layer.layerIsSelectable.value = false;
				layer.layerIsSelectable.lock();
				linkSessionState(visualization.getPlotLayer().backgroundIsVisible, layer.backgroundIsVisible);
				labelPlotter = layer.getDynamicPlotter().requestLocalObject(TextGlyphPlotter, true);
				
				_plotter.columns.addImmediateCallback(this, updateColumns, true);

				labelPlotter.xScreenOffset.value=5;
				labelPlotter.hAlign.defaultValue.value = BitmapText.HORIZONTAL_ALIGN_LEFT;
				labelPlotter.hideOverlappingText.value = true;
				linkSessionState(labelPlotter.dataY, labelPlotter.sortColumn);
				labelPlotter.setBaseKeySource(_plotter.keySet);
				getCallbackCollection(LinkableTextFormat.defaultTextFormat).addGroupedCallback(this, updateLabel, true);
			}
			private function updateLabel():void
			{
				labelPlotter.setDefaultTextFormat(LinkableTextFormat.defaultTextFormat);
			}
			
			private function updateColumns():void
			{
				var _columns:Array = _plotter.columns.getObjects();
				var x:AlwaysDefinedColumn = labelPlotter.dataX.requestLocalObject(AlwaysDefinedColumn, false);
				x.defaultValue.value = _columns.length - 1;
				
				if (_columns.length == 0)
				{
					labelPlotter.dataY.removeObject();
					return;
				}
			
				var lastColumn:IAttributeColumn = _columns.pop();
				labelPlotter.dataY.requestLocalObjectCopy(lastColumn as ILinkableObject);

				if (labelPlotter.text.internalColumn == null)
				{
					var headers:Array = ProbeTextUtils.probeHeaderColumns.getObjects();
					for (var i:int = 0; i < headers.length; i++)
					{
						if (ColumnUtils.getKeyType(headers[i]) == ColumnUtils.getKeyType(lastColumn))
						{
							labelPlotter.text.requestLocalObjectCopy(headers[i]);
							break;
						}
					}
				}
			}
			
		]]>
	</mx:Script>
	<mx:Number id="controlsFontSize">10</mx:Number>

</SimpleVisTool>
