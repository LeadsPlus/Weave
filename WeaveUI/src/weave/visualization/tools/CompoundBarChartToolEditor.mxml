<?xml version="1.0" encoding="utf-8"?>
<mx:TabNavigator xmlns="weave.visualization.tools.*"
				 xmlns:mx="http://www.adobe.com/2006/mxml"
				 xmlns:ui="weave.ui.*"
				 implements="weave.api.ui.ILinkableObjectEditor" xmlns:managers="weave.editors.managers.*"
				 >
	<mx:Script>
		<![CDATA[
			import weave.Weave;
			import weave.api.core.ILinkableObject;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.visualization.plotters.CompoundBarChartPlotter;
			
			[Bindable] public var _target:CompoundBarChartTool;
			
			public function setTarget(object:ILinkableObject):void
			{
				_target = object as CompoundBarChartTool;
			}
			public function applyChanges():void
			{
				
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				cRampEditor.colorRamp = _target._plotter.chartColors;
				linkBindableProperty(_target._plotter.horizontalMode, horizontalCheckBox, "selected");
				linkBindableProperty(_target._plotter.barSpacing, barSpacingSlider, "value");
				linkBindableProperty(_target._plotter.showValueLabels, showValueLabelsCheckBox, "selected");
				linkBindableProperty(_target._plotter.groupingMode, groupMode, 'selectedValue', 0); // this must be done after creationComplete because the RadioButtonGroup hasn't been initialized until then.
				_target._plotter.groupingMode.addGroupedCallback(this, updateInteractivity, true);
				_target._plotter.groupBySortColumn.addGroupedCallback(this, updateInteractivity, true);
				getCallbackCollection(_target._plotter.heightColumns).addGroupedCallback(this, updateInteractivity, true);
				updateInteractivity();
			}
			
			public function createLegend():void
			{
				var barChartLegendTool:BarChartLegendTool = Weave.root.requestObject(null, BarChartLegendTool, false);
				barChartLegendTool.dynamicBarChartTool.globalName = Weave.root.getName(_target);
			}			
			
			private function updateInteractivity():void
			{
				if (!_target.parent)
					return callLater(updateInteractivity);
				var _heightColumns:Array = _target._plotter.heightColumns.getObjects();
				
				if (_heightColumns.length > 1)
				{
					cRampEditor.enabled = true;
					groupMode.enabled = true;
					showValueLabelsCheckBox.enabled = groupedRadioButton.selected;
					colorColumnInput.enabled = false;
				}
				else
				{
					cRampEditor.enabled = false;
					groupMode.enabled = false;
					showValueLabelsCheckBox.enabled = true;
					colorColumnInput.enabled = true;
				}
			}
			
		]]>
	</mx:Script>
	<mx:VBox id="attributesPanel" label="Basic">
		<ui:DynamicColumnComponent visTool="{_target}" id="colorColumnInput" label="Color" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = _target.colorColumn"
								   toolTip="Color column selection is enabled when only a single column is in the list below." showLinkControl="false"/>
		<ui:DynamicColumnComponent visTool="{_target}" label="Label" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = _target._plotter.labelColumn"/>
		<ui:DynamicColumnComponent visTool="{_target}" label="Sort" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = _target._plotter.sortColumn"/>
		<mx:CheckBox id="groupBySortColumnCheckBox" label="Group bars by the sort column" creationComplete="linkBindableProperty(_target._plotter.groupBySortColumn, event.target, 'selected');"/>
		<mx:CheckBox label="Link Height and Sort Column" creationComplete="linkBindableProperty(_target.linkHeightAndSortColumns, event.target, 'selected');"/>
		<mx:HBox>
			<mx:CheckBox id="horizontalCheckBox" label="Horizontal bars"
						 toolTip="Check this box to display the bars horizontally, with values setting the length of the bar (from left to right) rather than the height (from bottom to top)."/>
			<mx:RadioButtonGroup id="groupMode"/>
			<mx:RadioButton id="groupedRadioButton" groupName="groupMode" label="Grouped bars" value="{CompoundBarChartPlotter.GROUP}"/>
			<mx:RadioButton id="stackedRadioButton" groupName="groupMode" label="Stacked bars" value="{CompoundBarChartPlotter.STACK}"/>
			<mx:RadioButton id="percentStackedRadioButton" groupName="groupMode" label="100% Stacked bars" value="{CompoundBarChartPlotter.PERCENT_STACK}"/>
		</mx:HBox>
		<mx:TabNavigator width="100%" height="100%">
			<ui:ColumnListComponent visTool="{_target}" label="Height attributes" creationComplete="(event.target as ColumnListComponent).hashMap = _target._plotter.heightColumns"/>
			<ui:ColumnListComponent visTool="{_target}" label="Positive error" creationComplete="(event.target as ColumnListComponent).hashMap = _target._plotter.positiveErrorColumns"/>
			<ui:ColumnListComponent visTool="{_target}" label="Negative error" creationComplete="(event.target as ColumnListComponent).hashMap = _target._plotter.negativeErrorColumns"/>
		</mx:TabNavigator>
	</mx:VBox>
	
	<mx:VBox label="Labeling">
		<mx:Button label="Show legend" click="createLegend()"/>
		<mx:CheckBox label="Show all axis labels" creationComplete="linkBindableProperty(_target.showAllLabels, event.target, 'selected');"/>
		
		<mx:HBox borderStyle="inset" borderThickness="1">
			<mx:VBox>
				<mx:CheckBox label="Show record labels" id="labelsChkBx" toolTip="This option enables bar labels that use the Label column"							 
							 creationComplete="linkBindableProperty(_target._plotter.showLabels, event.target, 'selected')"/>
				<mx:VBox paddingLeft="20" enabled="{labelsChkBx.selected}">
					<mx:VBox>
						<ui:Indent label="Color by record">
							<mx:CheckBox id="colorRecordLabelsChk"
										 creationComplete="linkBindableProperty(_target._plotter.recordLabelColoring, event.target, 'selected')"/>
							<ui:HelpComponent>This specifies if each label should have the same color as its corresponding record.</ui:HelpComponent>
						</ui:Indent>
						<mx:HBox id="colorRecordLabelsBox" 
								 enabled="{!colorRecordLabelsChk.selected}">
							<mx:Label text="Color"/>
							<mx:ColorPicker creationComplete="linkBindableProperty(_target._plotter.labelColor, event.target, 'selectedColor');"/>
							<ui:HelpComponent>This specifies the color to use for every label.</ui:HelpComponent>
						</mx:HBox>
					</mx:VBox>
					<ui:IndentTextInput inputWidth="64" label="Position" creationComplete="linkBindableProperty(_target._plotter.labelDataCoordinate, event.target, 'text')"/>
					<ui:Indent label="Angle">
						<mx:NumericStepper minimum="-180" maximum="180" stepSize="15"
										   creationComplete="linkBindableProperty(_target._plotter.labelRelativeAngle, event.target, 'value')"/>
					</ui:Indent>
					<ui:AlignmentControl creationComplete="linkBindableProperty(_target._plotter.labelVerticalAlign, event.target, 'verticalAlign'); linkBindableProperty(_target._plotter.labelHorizontalAlign, event.target, 'horizontalAlign');"/>
					<ui:Indent label="Label width">
						<mx:NumericStepper minimum="5" maximum="1000" stepSize="5"
										   creationComplete="linkBindableProperty(_target._plotter.labelMaxWidth, event.target, 'value')"/>
					</ui:Indent>
				</mx:VBox>
			</mx:VBox>
			
			<mx:VBox>				
				<mx:CheckBox id="showValueLabelsCheckBox" label="Show value labels"
							 toolTip="This option will show a value label for each bar."/>
				<mx:VBox paddingLeft="20" enabled="{showValueLabelsCheckBox.selected}">
					<mx:VBox>
						<ui:Indent label="Color by record">
							<mx:CheckBox id="colorValueLabelsChk"
										 creationComplete="linkBindableProperty(_target._plotter.recordValueLabelColoring, event.target, 'selected')"/>
							<ui:HelpComponent>This specifies if each label should have the same color as its corresponding record.</ui:HelpComponent>
						</ui:Indent>
						<mx:HBox id="colorValueLabelColorBox"
								 enabled="{!colorValueLabelsChk.selected}">
							<mx:Label text="Color"/>
							<mx:ColorPicker id="valueLabelColorPicker" creationComplete="linkBindableProperty(_target._plotter.valueLabelColor, event.target, 'selectedColor');"/>
							<ui:HelpComponent>This specifies the color to use for every label.</ui:HelpComponent>
						</mx:HBox>
					</mx:VBox>
					<ui:IndentTextInput inputWidth="64" label="Position" 
										creationComplete="linkBindableProperty(_target._plotter.valueLabelDataCoordinate, event.target, 'text')"/>							  
					<ui:Indent label="Angle">
						<mx:NumericStepper minimum="-180" maximum="180" stepSize="15"
										   creationComplete="linkBindableProperty(_target._plotter.valueLabelRelativeAngle, event.target, 'value')"/>
					</ui:Indent>
					<ui:AlignmentControl creationComplete="linkBindableProperty(_target._plotter.valueLabelVerticalAlign, event.target, 'verticalAlign'); linkBindableProperty(_target._plotter.valueLabelHorizontalAlign, event.target, 'horizontalAlign');"/>
					<ui:Indent label="Label width">
						<mx:NumericStepper minimum="5" maximum="1000" stepSize="5"
										   creationComplete="linkBindableProperty(_target._plotter.valueLabelMaxWidth, event.target, 'value')"/>
					</ui:Indent>
				</mx:VBox>
			</mx:VBox>
		</mx:HBox>
		<mx:CheckBox id="probeColumnsCheckBox" label="Include tool attributes in probe tooltip"
					 toolTip="Checking this box makes all of the following attributes visible in this tool's probe tooltip"
					 creationComplete="linkBindableProperty(_target.includeToolAttributesInProbe,event.target,'selected')"/>
	</mx:VBox>
	
	<mx:VBox id="advControlsPanel" label="Advanced">
		<mx:CheckBox label="In stacked mode, use gaps for missing data" creationComplete="linkBindableProperty(_target._plotter.stackedMissingDataGap, event.target, 'selected');"/>
		<ui:Indent label="Bar spacing:">
			<mx:HSlider id="barSpacingSlider" value="0" minimum="0" maximum="1" labels="['No gap', '1:3', '1:1']" tickInterval="0.25"
						toolTip="Move this slider to change the gap between bars.  All the way to the left means no gap.  The highest value is a 1:1 ratio, meaning equal bar width to gap width." showDataTip="false"
						liveDragging="true"/>
		</ui:Indent>
		
		<mx:CheckBox id="zoomToSubsetCheckBox" label="Zoom to subset" 
					 toolTip="Enables automatic zooming to the subset of data currently displayed"
					 creationComplete="linkBindableProperty(_target._plotter.zoomToSubset, event.target, 'selected')"/>
		<ui:ColorRampEditor id="cRampEditor" toolTip="The color ramp can only be set when more than one height column is specified."/>
	</mx:VBox>	
</mx:TabNavigator>