<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<mx:TabNavigator xmlns="weave.visualization.tools.*" 
	     xmlns:mx="http://www.adobe.com/2006/mxml"
	     xmlns:ui="weave.ui.*"
		 xmlns:userControls="weave.ui.userControls.*"
		 implements="weave.api.ui.ILinkableObjectEditor">
	<mx:Script>
		<![CDATA[
			import weave.api.WeaveAPI;
			import weave.api.core.ILinkableObject;
			import weave.api.data.AttributeColumnMetadata;
			import weave.api.linkBindableProperty;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.AttributeColumns.EquationColumn;
			import weave.utils.ColumnUtils;
			import weave.visualization.plotters.ParallelCoordinatesPlotter;
			[Bindable] private var _target:LineChartTool=null;
			public function setTarget(object:ILinkableObject):void
			{
				_target = object as LineChartTool;
			}
			public function applyChanges():void
			{
				
			}
			private function updateSelectionAndProbeOnlyCheckBox():void
			{
				selectionAndProbeOnlyCheckBox.selected = !_target.visualization.getPlotLayer().backgroundIsVisible.value;
			}
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				_target.visualization.getPlotLayer().backgroundIsVisible.addImmediateCallback(_target, updateSelectionAndProbeOnlyCheckBox, true);
				_target._plotter.xData.addGroupedCallback(this, updateFilterText);
				_target._plotter.xValues.addGroupedCallback(this, updateFilterText, true);
				(labelComponent as DynamicColumnComponent).dynamicObject = _target.labelPlotter.text;
				
				
				linkBindableProperty(_target.labelPlotter.size.defaultValue,labelSizeSlider,"value");
				linkBindableProperty(_target.labelPlotter.color.defaultValue, colorPicker, "selectedColor");
				
				linkBindableProperty(_target._plotter.alphaColumn.defaultValue, 		alphaSlider,		"value");
				linkBindableProperty(_target._plotter.shapeSize,  					shapeSizeSlider, 	"value");
				linkBindableProperty(_target._plotter.lineStyle.weight.defaultValue, thicknessSlider, 	"value");
				linkBindableProperty(_target._plotter.shapeToDraw, shapeCombo, "selectedItem");
				linkBindableProperty(_target._plotter.shapeBorderThickness, shapeBorderSizeSlider, "value");
				linkBindableProperty(_target._plotter.shapeBorderColor, shapeBorderColorPicker, "selectedColor");
				_target._plotter.curveType.addGroupedCallback(this, handleCurveType, true);
				function handleCurveType():void
				{
					curveCheckBox.selected = _target._plotter.curveType.value == ParallelCoordinatesPlotter.CURVE_DOUBLE;
				}
			}
			
			private function handleSelectionAndProbeOnlyCheckBox():void
			{
				_target.visualization.getPlotLayer().backgroundIsVisible.value = !selectionAndProbeOnlyCheckBox.selected;
			}
			
			private function updateFilterText():void
			{
				xValuesInput.text = WeaveAPI.CSVParser.createCSV([_target._plotter.getXValues()]);
			}
			
			private function handleCurveCheckBox():void
			{
				if (curveCheckBox.selected)
					_target._plotter.curveType.value = ParallelCoordinatesPlotter.CURVE_DOUBLE;
				else
					_target._plotter.curveType.value = ParallelCoordinatesPlotter.CURVE_NONE;
			}
			
			private function alphaSliderFormatFunction(value:Number):String {
				//return int(100 - (value * 100)) + "% Transparent";
				return int((value * 100)) + "% Opaque" + "\n" + int(100 - (value * 100)) + "% Transparent";
			}
			
			/**
			 * This function generates a label equation using the current Label column and the plotter's filterColumn
			 * and makes it the new Label column
			 */
			protected function updateLabelColumn():void
			{
				if(!_target._plotter.enableGroupBy.value) 
					return;
				if(!_target.labelPlotter.text.internalColumn)
					return;
				if(ColumnUtils.getKeyType(_target.labelPlotter.text) != ColumnUtils.getKeyType(_target._plotter.xData))
					return;
				if(_target.labelPlotter.text.internalColumn is EquationColumn)
					return;
				
				var labelColumn:DynamicColumn = new DynamicColumn();
				labelColumn.requestLocalObjectCopy(_target.labelPlotter.text);
				
				var labelEquation:EquationColumn = _target.labelPlotter.text.requestLocalObject(EquationColumn, false) as EquationColumn;
				labelEquation.delayCallbacks();
				labelEquation.variables.requestObjectCopy("labelColumn",labelColumn);
				labelEquation.variables.requestObjectCopy("keyColumn", _target._plotter.groupBy);
				labelEquation.setMetadata(AttributeColumnMetadata.TITLE, ColumnUtils.getTitle(labelColumn) + "Equation");
				labelEquation.equation.value = 'key = getAssociatedKeys(keyColumn, getKey())[0], getValueFromKey(labelColumn, key, String)';
				labelEquation.resumeCallbacks();
				/* 
				if(!_plotter.lineStyle.color.internalDynamicColumn)
				return;
				
				if(_plotter.lineStyle.color.internalDynamicColumn is EquationColumn)
				return;
				
				var color:DynamicColumn = new DynamicColumn();
				color.requestGlobalObject(Weave.DEFAULT_COLOR_COLUMN, ColorColumn, false);
				
				var equation:EquationColumn = colorColumn.requestLocalObject(EquationColumn, false) as EquationColumn;
				equation.variables.copyObject("colorColumn", color);
				equation.variables.copyObject("key", _plotter.keyColumn);
				equation.columnTitle = ColumnUtils.getTitle(color)+'Equation';
				equation.equation.value = 'key = getKeysFromValue(get("key"), getKey(), QKey)[0], getValueFromKey(get("colorColumn"), key, Number)';
				*/
			}
			
		]]>
	</mx:Script>
	<mx:Number id="controlsFontSize">10</mx:Number>
	<ui:ControlPanel>
		<mx:VBox id="attributesPanel" label="Data">
			<ui:DynamicColumnComponent visTool="{_target}" label="Color" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = _target.colorColumn" showLinkControl="false"/>
			<ui:DynamicColumnComponent visTool="{_target}" label="Label" id="labelComponent"/>
			<ui:ColumnListComponent visTool="{_target}" label="Attributes along X axis" creationComplete="(event.target as ColumnListComponent).hashMap = _target._plotter.columns"/>
			<mx:HBox>
				<mx:CheckBox id="probeColumnsCheckBox" label="Include tool attributes in probe tooltip"
							 toolTip="Checking this box makes all of the tool's attributes visible in this tool's probe tooltip"
							 creationComplete="linkBindableProperty(_target.includeToolAttributesInProbe,event.target,'selected')"/>
			</mx:HBox>
		</mx:VBox>
		<mx:VBox id="VizControlsPanel" label="Appearance">
			<mx:HBox verticalAlign="middle">
				<mx:Label text="Shape:" color="0x000000" fontSize="{controlsFontSize}" 
						  toolTip="This controls what shape is used to indicate the data points on the axes."/>
				<ui:CustomComboBox id="shapeCombo" dataProvider="{ParallelCoordinatesPlotter.shapesAvailable}"/>
				<mx:HBox enabled="{shapeCombo.selectedItem != ParallelCoordinatesPlotter.NO_SHAPE}" verticalAlign="middle">
					<mx:Label text="Size:"
							  color="0x000000" fontSize="{controlsFontSize}" 
							  toolTip="This controls the size of the shapes indicating the data points on the axes."/>
					<mx:HSlider id="shapeSizeSlider"
								width="100%" 
								snapInterval="1"
								tickInterval="5"
								labels="{['0','5','10','15','20']}"
								minimum="0" maximum="20" 
								liveDragging="true"/>
				</mx:HBox>
			</mx:HBox>
			
			<mx:HBox verticalAlign="middle">
				<mx:HBox
						enabled="{!(shapeCombo.selectedItem == ParallelCoordinatesPlotter.NO_SHAPE || 
						shapeCombo.selectedItem == ParallelCoordinatesPlotter.EMPTY_CIRCLE ||
						shapeCombo.selectedItem == ParallelCoordinatesPlotter.EMPTY_SQUARE ||
						shapeBorderSizeSlider.value == 0) }">
					<mx:Label text="Shape border color:" color="0x000000" fontSize="{controlsFontSize}"/>
					<mx:ColorPicker id="shapeBorderColorPicker"
									toolTip="This controls color of the border around the shape at each point."/>
				</mx:HBox>
				
				<mx:HBox width="100%" verticalAlign="middle"
						enabled="{shapeCombo.selectedItem != ParallelCoordinatesPlotter.NO_SHAPE}">
					<mx:Label text="Thickness:" color="0x000000" fontSize="{controlsFontSize}" 
							  toolTip="This controls the border size of the shapes indicating the data points on the axes."/>
					<mx:HSlider id="shapeBorderSizeSlider" 
								width="100%" 
								snapInterval="1"
								tickInterval="1" 
								labels="{['0', '1', '2', '3', '4', '5']}"
								minimum="0" maximum="5"
								liveDragging="true"/>
				</mx:HBox>
			</mx:HBox>
			
			<mx:HBox verticalAlign="middle">
				<mx:Label text="Line Opacity:" toolTip="Use this control to see how transparent lines are.  Moving left increases transparency (decreased opacity), moving to the right decreases transparency (increased opacity) up to fully opaque (no transparency)."/>
				<mx:HSlider id="alphaSlider" 
							width="100%" 
							snapInterval="0.1"
							tickInterval="0.5" labels="{['0%', '50%', '100%']}"
							dataTipFormatFunction="alphaSliderFormatFunction"
							minimum="0.0" maximum="1.0" 
							liveDragging="true"/>
				<mx:Label text="Thickness:"/>
				<mx:HSlider id="thicknessSlider" minimum="1" maximum="4" labels="{['1','2','3','4']}" snapInterval="1" liveDragging="true" tickInterval="1"/>
				
			</mx:HBox>
			<mx:CheckBox id="curveCheckBox" label="Curved lines"
						 change="_target._plotter.curveType.value = curveCheckBox.selected ? ParallelCoordinatesPlotter.CURVE_DOUBLE : ParallelCoordinatesPlotter.CURVE_NONE"/>
			
			<mx:HBox verticalAlign="middle">
				<mx:Label text="Label Text Size: "/>
				<mx:HSlider id="labelSizeSlider"
							width="100%"
							alpha="1.0"
							snapInterval="1"
							tickInterval="5" labels="{['5','10','15','20']}"
							minimum="5" maximum="20" 
							liveDragging="true"/>
				<mx:Label text="Color:"/>
				<mx:ColorPicker id="colorPicker" width="22" height="22"/>
			</mx:HBox>

			<mx:CheckBox id="selectionAndProbeOnlyCheckBox" label="Show selection &amp; probe only" 
						 toolTip="" change="handleSelectionAndProbeOnlyCheckBox();"/>
			<mx:CheckBox id="zoomToSubsetCheckBox" label="Zoom to Subset" 
						 toolTip="Enables automatic zooming to the subset of data currently displayed"
						 creationComplete="linkBindableProperty(_target._plotter.zoomToSubset, event.target, 'selected')"/>
		</mx:VBox>
		<mx:VBox label="Grouping">
			<mx:CheckBox id="enableGroupByCheckBox" creationComplete="linkBindableProperty(_target._plotter.enableGroupBy, event.target, 'selected')"
						 label="Group records by column values"
						 toolTip="Enable/disable grouping data by category value"/>
			<mx:VBox enabled="{enableGroupByCheckBox.selected}">
				
				<mx:VBox paddingLeft="20" borderStyle="solid">
					<ui:DynamicColumnComponent visTool="{_target}" label="X Column" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = _target._plotter.xData"
											   toolTip="Attribute to appear on the x axis. All columns must have the same keyType."/>
					<ui:DynamicColumnComponent visTool="{_target}" label="Y Column" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = _target._plotter.yData"
											   toolTip="Attribute to appear on the y axis. All columns must have the same keyType."/>
					<ui:DynamicColumnComponent visTool="{_target}" label="Group by" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = _target._plotter.groupBy"
											   toolTip="Specify column to get keys from. All columns must have the same keyType."/>
					<ui:DynamicColumnComponent visTool="{_target}" label="Label" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = _target.labelPlotter.text"
											   toolTip="Attribute used for record label text. All columns must have the same keyType."/>
				</mx:VBox>
				<mx:Button label="Generate label Equation" toolTip="Generates label equation from current Label column if its keyType matches the group-by keyType"
						   click="updateLabelColumn()"/>
				<mx:HBox width="100%">
					<mx:Label text="Customize X values:"/>
					<mx:TextInput id="xValuesInput" toolTip="These values will appear on the x axis" width="100%"/>
					<mx:Button label="Apply" click="_target._plotter.xValues.value = xValuesInput.text;"/>
					<mx:Button label="Reset" click="_target._plotter.xValues.value = ''; updateFilterText();"/>
				</mx:HBox>
			</mx:VBox>
		</mx:VBox>
	</ui:ControlPanel>
</mx:TabNavigator>
