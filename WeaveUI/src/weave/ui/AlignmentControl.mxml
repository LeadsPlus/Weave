<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<!---
	This is a control for setting two text alignment values:  horizontalAlign and verticalAlign.

	@author adufilie
-->
<mx:Canvas xmlns="weave.ui.*"
		xmlns:mx="http://www.adobe.com/2006/mxml"
		creationPolicy="all" clipContent="false"
		horizontalScrollPolicy="off" verticalScrollPolicy="off" toolTip="Alignment">
	<mx:VBox verticalGap="0">
		<mx:HBox horizontalGap="0">
			<mx:Button id="bottom_right"/>
			<mx:Button id="bottom_center"/>
			<mx:Button id="bottom_left"/>
		</mx:HBox>
		<mx:HBox horizontalGap="0">
			<mx:Button id="middle_right"/>
			<mx:Button id="middle_center"/>
			<mx:Button id="middle_left"/>
		</mx:HBox>
		<mx:HBox horizontalGap="0">
			<mx:Button id="top_right"/>
			<mx:Button id="top_center"/>
			<mx:Button id="top_left"/>
		</mx:HBox>
	</mx:VBox>
	<mx:Image source="@Embed(source='/weave/resources/images/alignment-control.png')"
			  x="0" y="0" includeInLayout="false" mouseChildren="false" mouseEnabled="false"/>
	
	<mx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			
			[Bindable] public var verticalAlign:String = 'middle';
			[Bindable] public var horizontalAlign:String = 'center';
			
			private var buttons:Array;
			
			override protected function createChildren():void
			{
				super.createChildren();
				
				buttons = [
					top_left, top_center, top_right,
					middle_left, middle_center, middle_right,
					bottom_left, bottom_center, bottom_right
				];
				for each (var button:Button in buttons)
				{
					button.setStyle('cornerRadius', 0);
					button.width = 20;
					button.height = 20;
					button.toggle = true;
					button.addEventListener(MouseEvent.CLICK, handleButtonClick);
				}
				BindingUtils.bindSetter(_invalidateProperties, this, ['verticalAlign']);
				BindingUtils.bindSetter(_invalidateProperties, this, ['horizontalAlign']);
			}
			
			private function _invalidateProperties(..._):void
			{
				invalidateProperties();
			}
			
			override public function validateProperties():void
			{
				super.validateProperties();
				selectButton(verticalAlign + '_' + horizontalAlign);
			}
			
			private function handleButtonClick(event:MouseEvent):void
			{
				selectButton((event.currentTarget as Button).id);
			}
			
			private function selectButton(buttonId:String):void
			{
				for each (var button:Button in buttons)
				{
					if (button.id == buttonId)
					{
						var values:Array = button.id.split('_');
						if (verticalAlign != values[0])
							verticalAlign = values[0];
						if (horizontalAlign != values[1])
							horizontalAlign = values[1];
						button.selected = true;
					}
					else
					{
						button.selected = false;
					}
				}
			}
		]]>
	</mx:Script>
</mx:Canvas>
