<?xml version="1.0" encoding="utf-8"?>
<!--
	
	Weave (Web-based Analysis and Visualization Environment)
	Copyright (C) 2008-2011 University of Massachusetts Lowell
	
	This file is a part of Weave.
	
	Weave is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License, Version 3,
	as published by the Free Software Foundation.
	
	Weave is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
	
	You should have received a copy of the GNU General Public License
	along with Weave.  If not, see <http://www.gnu.org/licenses/>.

-->



<!-- 
/*
	Whomeever this code gets passed onto, please feel free to delete or
	rewrite the comments I have written. They are only painfully obvious
	to facilitate the transferring of this code to the new maintainer.

	~Andrew Wilkinson
*/
-->


<ui:DraggablePanel xmlns="weave.visualization.tools.*"
				   xmlns:mx="http://www.adobe.com/2006/mxml"
				   xmlns:ui="weave.ui.*"
				   xmlns:userControls="weave.ui.userControls.*"
				   creationPolicy="all" layout="absolute">
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.ToolTip;
			import mx.core.Application;
			import mx.core.FlexGlobals;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.utils.StringUtil;
			
			import org.igniterealtime.xiff.events.OutgoingDataEvent;
			import org.igniterealtime.xiff.events.RoomEvent;
			
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.core.ILinkableHashMap;
			import weave.api.getCallbackCollection;
			import weave.api.getSessionState;
			import weave.api.newDisposableChild;
			import weave.api.registerDisposableChild;
			import weave.api.registerLinkableChild;
			import weave.api.setSessionState;
			import weave.core.SessionManager;
			import weave.core.SessionStateLog;
			import weave.services.collaboration.CollaborationEvent;
			import weave.services.collaboration.CollaborationService;
			import weave.ui.AlertTextBox;
			
			public const collabService:CollaborationService = registerDisposableChild(this, new CollaborationService(Weave.root));
			
			private const labelWidth:Number = 80;
			private const textAreaWidth:Number = 200;
			private var cursorList:ArrayCollection = new ArrayCollection();
			
			//Guaranteed to run at the creation of the tool. Is used to register all the event listeners.
			override protected function childrenCreated():void
			{	
				//Pops up the control panel when a user opens the tool
				//so that they can type in the server to connect to.
				toggleControlPanel();
				
				//Callbakcs to be heard from the collabService, this is how the collabservice
				//can talk back to the Collaboration tool
				collabService.addEventListener(CollaborationEvent.LOG, handleLogEvent);
				collabService.addEventListener(CollaborationEvent.DISCONNECT, handleDisconnect);
				collabService.addEventListener(CollaborationEvent.CONNECT, handleConnect);
				collabService.addEventListener(CollaborationEvent.NICK_ERROR, nickConflictError);
				collabService.addEventListener(CollaborationEvent.LOCKED_ERROR, lockedError);
				collabService.addEventListener(CollaborationEvent.USER_JOINED_ROOM, handleCreateUserMouse);
			}
			
			//Sends a message from the text box(input) to the server as a TEXT message
			private function handleInputKeyUp(e:KeyboardEvent):void
			{
				if( e.keyCode != Keyboard.ENTER || input.text=="")
					return;
				if( collabService.isConnected )
					collabService.sendTextMessage( input.text );
				input.text = "";	//clear the input
			}
			
			private function sendToRoomButton():void
			{
				if( input.text == "" )
					return;
				if( collabService.isConnected )
					collabService.sendTextMessage( input.text );
				input.text = "";	//clear the input
			}
			
			
			//On connection, the config page is removed, and all the buttons that are only available
			//while connected are enabled.
			private function connect():void
			{
				if( username.text == "" || serverIP.text == "" || serverName.text == "" || roomToJoin.text == "" || port.text ==  "" )
				{
					Alert.show( "Can't leave any field blank" );
				}
				else
				{
					collabService.connect(serverIP.text, serverName.text, int(port.text), roomToJoin.text, username.text);
					cPanel.removePanel();
					updateEnabledSettings();
					usernameError.visible = false;
					serverNameError.visible = false;
				}
			}
			override public function toggleControlPanel():void
			{
				super.toggleControlPanel();
				updateEnabledSettings();
			}
			private function updateEnabledSettings():void
			{
				connectButton.enabled = !collabService.isConnected;
				disconnectButton.enabled = collabService.isConnected;
				input.enabled = collabService.isConnected;
				sendButton.enabled = collabService.isConnected;
			}
			
			private function lockedError(e:Event):void
			{
				toggleControlPanel();
				serverNameError.visible = true;
			}
			private function nickConflictError(e:Event):void
			{
				toggleControlPanel();
				usernameError.visible = true;
			}
			
			//For when a text message is recieved from the server, it is displayed to the log
			//NOTE: I could not get proper scrolling to work once the recieved text messages
			//		went below the height of the log window. 
			private function handleLogEvent(e:CollaborationEvent):void
			{
				log.text += e.getText() + '\n';
				callLater(
					function():void {
						log.verticalScrollPosition = log.maxVerticalScrollPosition;
					}
				);
			}
			
			//If the collabService is disconnected for some reason, this ensures the collabUI
			//resets which buttons are disabled and enabled.
			private function handleDisconnect( e:CollaborationEvent):void
			{
				updateEnabledSettings();
			}
			private function handleConnect( e:CollaborationEvent):void
			{
				updateEnabledSettings();
			}
			private function handleCreateUserMouse(e:CollaborationEvent):void
			{
				cursorList.addItem(CollabMouseCursor.addPopUp(FlexGlobals.topLevelApplication as DisplayObject));
			}
			
			private var toolTipper:ToolTip = new ToolTip()
			
			protected function users_itemRollOverHandler(event:ListEvent):void
			{
				toolTipper.text = collabService.userList[event.rowIndex].name;
				toolTipper.x = mouseX;
				toolTipper.y = mouseY;
				addChild( toolTipper );
			}
			
			protected function users_itemRollOutHandler(event:ListEvent):void
			{
				removeChild( toolTipper );				
			}
			
			private function trimInput(event:Event):void
			{
				event.target.text = StringUtil.trim(event.target.text); // hack
			}
			
			protected function button1_clickHandler(event:MouseEvent):void
			{
				var cursor:IFlexDisplayObject = PopUpManager.createPopUp(FlexGlobals.topLevelApplication as DisplayObject, CollabMouseCursor);
				PopUpManager.centerPopUp(cursor);
				stage.addEventListener(MouseEvent.MOUSE_MOVE, 
					function(_:MouseEvent):void 
					{
						cursor.x = _.stageX+30;
						cursor.y = _.stageY;
					}
				);
			}
			
		]]>
	</mx:Script>

	
	<mx:VBox width="100%" height="100%" paddingBottom="10" paddingLeft="10" paddingRight="10"
			 paddingTop="10">
		<mx:HDividedBox width="100%" height="100%">
			<mx:TextArea id="log" width="80%" height="100%" editable="false"/>
			<mx:List id="users" height="100%" width="20%" minWidth="100"
					 editable="false" dataProvider="{collabService.userList}" itemRollOver="users_itemRollOverHandler(event)" itemRollOut="users_itemRollOutHandler(event)">
				<mx:itemRenderer>
					<mx:Component>
						<mx:HBox width="100%" height="100%" horizontalScrollPolicy="off">
							
							<mx:Script>
								<![CDATA[
									import mx.collections.ArrayCollection;
									import mx.controls.Alert;
									import mx.events.CloseEvent;
									
									private var roleID:String = "";
									
									private function changeRole(event:MouseEvent):void
									{
										if( outerDocument.collabService.myRole != "moderator" )
											return;
										
										roleID = event.currentTarget.name;
										var role:String = getRole(roleID);
										if( !role ) return;
										
										if( role == "moderator" )
											if( roleID == outerDocument.collabService.nickname )
												Alert.show("You are about to remove your own moderator status. Continue?", "Warning", Alert.YES | Alert.NO, null, handleMod);
											else
												setRole(roleID, "participant");
										else
											setRole(roleID, "moderator");
									}
									private function handleMod(e:CloseEvent):void
									{
										if( e.detail == Alert.YES )
											setRole(roleID, "participant");
									}
									private function getRole(id:String):String
									{
										var list:ArrayCollection = outerDocument.collabService.userList;
										for( var i:int = 0; i < list.length; i++ )
										{
											if( list[i].name == id )
												return list[i].role;
										}
										return null;
									}
									private function setRole(id:String, role:String):void
									{
										var list:ArrayCollection = outerDocument.collabService.userList;
										for( var i:int = 0; i < list.length; i++ )
										{
											if( list[i].name == id )
											{
												if( id == outerDocument.collabService.nickname )
													outerDocument.collabService.myRole = role;
												switch( getRole(id) )
												{
													case "moderator":
														outerDocument.collabService.userList[i].affiliation = "none";
														break;
													case "participant":
														outerDocument.collabService.userList[i].affiliation = "owner";
														break;
												}
												outerDocument.collabService.userList[i].role = role;
												outerDocument.collabService.userList.refresh();
												return;
											}
										}
									}
								]]>
							</mx:Script>
							
							<mx:Label text="{data.name}" horizontalCenter="0" left="5" width="100%" />
							<!--
							<mx:Spacer width="100%" />
							<mx:Image id="img" right="15" click="changeRole(event)" name="{data.name}"
									  source="{ ((data.role == 'moderator') ? 'http://129.63.17.193/star.png' : 'http://129.63.17.193/unstar.png' ) }" />
							-->
						</mx:HBox>
					</mx:Component>
				</mx:itemRenderer>
			</mx:List>
			<!--<mx:TextArea id="users" height="100%" editable="false"/>-->
		</mx:HDividedBox>
		<mx:HBox width="100%">
			<mx:TextInput id="input" width="100%" enabled="false" enter="sendToRoomButton()"/>
			<mx:Button id="sendButton" label="Send" enabled="false" click="sendToRoomButton();"/>
		</mx:HBox>
	</mx:VBox>
	
	<!--
		The input fields are filled with the defaults from the server I was testing
		on. If you're making your own server, make sure annonymous login is enabled.
	-->
	
	<ui:ControlPanel id="cPanel">
		<mx:VBox label="Visualization Controls">
			<mx:HBox width="100%">
				<mx:Label text="IP:" width="{labelWidth}" />
				<mx:TextInput id="serverIP" width="{textAreaWidth}" text="demo.oicweave.org" change="trimInput(event);"/>
			</mx:HBox>
			<mx:HBox width="100%">
				<mx:Label text="ServerName:" width="{labelWidth}" />
				<mx:TextInput id="serverName" width="{textAreaWidth}" text="ivpr-vm" change="trimInput(event);"/>
				<mx:Label id="serverNameError" text="Server cannot be reached, please try another." visible="false" includeInLayout="{serverNameError.visible}" />
			</mx:HBox>
			<mx:HBox width="100%">
				<mx:Label text="Port:" width="{labelWidth}" />
				<mx:TextInput id="port" width="{textAreaWidth}" text="5222" change="trimInput(event);"/>
			</mx:HBox>
			<mx:HBox width="100%">
				<mx:Label text="Username:" width="{labelWidth}" />
				<mx:TextInput id="username" width="{textAreaWidth}" change="trimInput(event);"/>	
				<mx:Label id="usernameError" text="Username already exists, please try another." visible="false" includeInLayout="{usernameError.visible}"/>
			</mx:HBox>
			<mx:HBox width="100%">
				<mx:Label text="Room Name:" width="{labelWidth}" />
				<mx:TextInput id="roomToJoin" width="{textAreaWidth}" text="Test" change="trimInput(event);"/>
			</mx:HBox>
			<mx:HBox width="100%">
				<mx:Button id="connectButton" label="Connect" click="connect();" />
				<mx:Button id="disconnectButton" label="Disconnect" enabled="false" click="collabService.disconnect();"/>
			</mx:HBox>
			<mx:ColorPicker id="picker" color="{Math.random() * 0xFFFFFF}" />
		</mx:VBox>
	</ui:ControlPanel>
	
</ui:DraggablePanel>
